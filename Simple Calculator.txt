// Time taken: 3 days to complete the Calculator 
// A stack based calculator that calculate the result by inputting math expression in string format and convert from infix expression to postfix expression
// A+B-C    ->      AB+C-
// Please take note that the string parameter will always consist of numbers and operators separated by spaces 
// Sample of test case:
// Test Case 1: 1 + 1 * 3                   = 4
// Test Case 2: 23 - ( 29.3 - 12.5 )        = 6.2
// Test Case 3: 10 - ( 2 + 3 * ( 7 - 5 ) )  = 2
// Test Case 4: 1 + ( 2 * 3 ) ^ 2           = 37


using System;
using System.Collections.Generic;

public class Calculator
{  
    
    public double Calculate(string sum) {
        
        // We can use for loop to skip or separate the white spaces as well
        sum = sum.Trim(' ');
        string[] tokens = sum.Split();
        string[] ans = createPostfix(tokens).Split();
        Stack<double> numbers = new Stack<double>();
        
        double left = 0;
        double right = 0;
        
        foreach (string token in ans) {
            switch (token) {
                    case "+":
                        right   = numbers.Pop();
                        left    = numbers.Pop();  
                        numbers.Push(left + right);
                        break;
                        
                    case "-":
                        right   = numbers.Pop();
                        left    = numbers.Pop();  
                        numbers.Push(left - right);
                        break;
                        
                    case "*":
                        right   = numbers.Pop();
                        left    = numbers.Pop();  
                        numbers.Push(left * right);
                        break;
                        
                    case "/":
                        right   = numbers.Pop();
                        left    = numbers.Pop();  
                        numbers.Push(left / right);
                        break;
                        
                    case "^":
                        right   = numbers.Pop();
                        left    = numbers.Pop();  
                        numbers.Push(Math.Pow(left, right));
                        break;
                    
                    default:
                        numbers.Push(Convert.ToDouble(token));
                        break;
                }
        }

        return numbers.Pop();
    }
    
    /**
    *   Function that check priority of the operator
    */
   public int priority(string op)
    {
        if (op == "+" || op == "-")
            return 1;
        else if (op == "*" || op == "/" || op == "%")
            return 2;
        else if (op == "^")
            return 3;
        else return 0;
    }
    
    /**
    *   Function that convert infix to postfix expression
    */
    public string createPostfix(string[] infix)
    {
        Stack<string> stack = new Stack<string>();
        string output = "";
        string _out;
        foreach (string token in infix)
        {
            switch (token)
            {
                case "+":
                case "-":
                case "*":
                case "/":
                case "^":
                    // Check priority of operator in stack if it's not empty
                    while (stack.Count > 0 && priority(token) <= priority(stack.Peek()))
                    {
                        _out = stack.Peek();
                        stack.Pop();
                        output = output + " " + _out;
                    }
                    stack.Push(token);
                    output = output + " ";
                    break;
                case "(":
                    stack.Push(token);
                    break;
                case ")":
                    while ( stack.Count > 0 && 
                            (_out = stack.Peek()) != "("
                    ) {
                        stack.Pop();
                        output = output + " " + _out;
                    }
                    if ( stack.Count > 0 && 
                         (_out = stack.Peek()) == "(")
                        stack.Pop();
                    break;
                default:
                    output += token;
                    break;
            }
        }
        
        while (stack.Count > 0)
        {
            _out = stack.Peek();
            stack.Pop();
            output = output + " " +_out;
        }
        return output;
    }
    
    public static void Main(string[] args)
    {
        string input = "10 - ( 2 + 3 * ( 7 - 5 ) )";
        Calculator cal = new Calculator();
        double result = cal.Calculate(input);
        Console.WriteLine ("Predefined expression:\t" + input );
        Console.WriteLine ("Sum of result:\t" + result );
    }
}